/*
I have a better algorithm, but may not fit with this program. if user pressed move key, let the line moves between x0 and x1, and this range is
the range of block size. So the whole area never changes, always 400*400
*/
class Map {
  ArrayList<PVector> points = new ArrayList<PVector>(); //The pvector for blocks; saving x,y value to draw the grid
  int size;
  int offsetX = 0, offsetY = 0; //make it X,Y at 0

  
  Map() {
    size = 15; //The size of block 15
    initializePoints(); //First initialize
  }

  // 
  void initializePoints() {
    points.clear(); // clear all the points generated in the array

    //Calculate which points need to be displayed in the window based on the current offset
    for (int x =-offsetX / size * size; x < width - offsetX; x += size) {
      for (int y = -offsetY / size * size; y < height - offsetY; y += size) {
        if (x >= -offsetX && y >= -offsetY) {
          points.add(new PVector(x + offsetX, y + offsetY)); //Add every visible grid point
        }
      }
    }
  }

  // Input value dx, dy to the update parameter of map class
  //Problem: too much lag, I need make it to PVector, to make it comfortable when press 2 keys down
  void update(float dx, float dy) {
    offsetX += dx;
    offsetY += dy;
    initializePoints(); //Re-Initialize, to make it keep updating //problem: it can't fill the full screen aftering moved
  }

  //display the whole map
  void display() {
    // push the map's display together by inputed value dx,dy
    pushMatrix();
    translate(offsetX, offsetY);

    stroke(0);
    //draw all the points generated by intialize() and saved by PVector ArrayList
    for (PVector point : points) {
      float startX = point.x;
      float startY = point.y;

     
      if (startX + size <= width) {
        line(startX, startY, startX + size, startY);
      }

      
      if (startY + size <= height) {
        line(startX, startY, startX, startY + size);
      }
    }

    popMatrix();
  }
}
